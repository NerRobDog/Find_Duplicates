import logging
from typing import Optional, Callable
from functools import wraps


class LoggerWrapper:
    def __init__(self, name: str = "FindDuplicatesLogger", log_level: str = "INFO", log_file: Optional[str] = None):
        # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger(name)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        self.logger.setLevel(getattr(logging, log_level.upper(), logging.INFO))

        formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s", "%Y-%m-%d %H:%M:%S")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –ø–∏—à–µ–º –≤ —Ñ–∞–π–ª
        if log_file:
            file_handler = logging.FileHandler(log_file)
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)

    def debug(self, message: str):
        self.logger.debug(message)

    def info(self, message: str):
        self.logger.info(message)

    def warning(self, message: str):
        self.logger.warning(message)

    def error(self, message: str):
        self.logger.error(message)

    def critical(self, message: str):
        self.logger.critical(message)

    def set_level(self, level: str):
        self.logger.setLevel(getattr(logging, level.upper(), logging.INFO))


# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
logger = LoggerWrapper(log_level="INFO")


def setup_logger(level: str = "INFO", log_file: Optional[str] = None):
    """
    –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –Ω–∞ –Ω—É–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏/–∏–ª–∏ —Ñ–∞–π–ª.
    """
    logger.set_level(level)
    # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ª–æ–≥–≥–µ—Ä–∞, –Ω–æ —Ç–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç—Å—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∞.
    # –õ–∏–±–æ —Å–¥–µ–ª–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Å logger = LoggerWrapper(name, level, log_file).
    # –ù–∏–∂–µ ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å:
    if log_file:
        # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –¥–æ–±–∞–≤–∏—Ç—å file_handler:
        file_handler = logging.FileHandler(log_file)
        formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s", "%Y-%m-%d %H:%M:%S")
        file_handler.setFormatter(formatter)
        logger.logger.addHandler(file_handler)


def log_execution(level: str = "INFO", message: Optional[str] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π.
    """

    def decorator(func: Callable):
        @wraps(func)
        def wrapper(*args, **kwargs):
            log_msg = message or f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}"
            getattr(logger, level.lower(), logger.info)(f"üöÄ –ù–∞—á–∞–ª–æ: {log_msg}")
            try:
                result = func(*args, **kwargs)
                getattr(logger, level.lower(), logger.info)(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {log_msg}")
                return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {e}")
                raise

        return wrapper

    return decorator
