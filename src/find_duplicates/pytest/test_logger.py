# –§–∞–π–ª: pytest/test_logger.py
import os
import pytest
from find_duplicates.modules.logger import LoggerWrapper, log_execution


def test_logger_wrapper_console_output(caplog):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–≥–µ—Ä–∞ (LoggerWrapper) –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ —É—Ä–æ–≤–Ω–µ DEBUG
    —Å –ø–æ–º–æ—â—å—é —Ñ–∏–∫—Å—Ç—É—Ä—ã caplog.
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è caplog –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å 'DEBUG'
    # –∏ –ª–æ–≥–≥–µ—Ä —Å –∏–º–µ–Ω–µ–º "TestLogger", —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    caplog.set_level("DEBUG", logger="TestLogger")

    # –°–æ–∑–¥–∞—ë–º –ª–æ–≥–≥–µ—Ä
    logger_wrapper = LoggerWrapper(name="TestLogger", log_level="DEBUG")
    logger_wrapper.debug("Debug message")
    logger_wrapper.info("Info message")
    logger_wrapper.warning("Warning message")

    # –í—Å–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ caplog.records
    messages = [record.message for record in caplog.records]
    assert "Debug message" in messages
    assert "Info message" in messages
    assert "Warning message" in messages


def test_logger_wrapper_file_output(tmp_path, caplog):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ log_file —Å–æ–æ–±—â–µ–Ω–∏—è —É—Ö–æ–¥—è—Ç –∏ –≤ —Ñ–∞–π–ª,
    –∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—Å—ë –µ—â—ë –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ caplog.
    """
    log_file = tmp_path / "test.log"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è caplog
    caplog.set_level("INFO", logger="TestLoggerFile")

    logger_wrapper = LoggerWrapper(
        name="TestLoggerFile", log_level="INFO",
        log_file=str(log_file)
    )
    logger_wrapper.info("File log message")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø–æ—è–≤–∏–ª—Å—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç
    assert log_file.exists()
    content = log_file.read_text(encoding="utf-8")
    assert "File log message" in content

    # –¢–∞–∫–∂–µ —Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ caplog –ø–æ–π–º–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages = [r.message for r in caplog.records if r.name == "TestLoggerFile"]
    assert "File log message" in messages


def test_logger_wrapper_levels(caplog):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —É—Ä–æ–≤–Ω—é: log_level="WARNING"
    => DEBUG/INFO –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–ª—è—Ç—å—Å—è, WARNING/ERROR ‚Äî –¥–∞.
    """
    caplog.set_level("DEBUG", logger="TestLoggerLevel")

    logger_wrapper = LoggerWrapper(name="TestLoggerLevel", log_level="WARNING")
    logger_wrapper.debug("Debug hidden")
    logger_wrapper.info("Info hidden")
    logger_wrapper.warning("Warning visible")
    logger_wrapper.error("Error visible")

    # –õ–æ–≤–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–º–µ–Ω–Ω–æ –æ—Ç "TestLoggerLevel"
    messages = [r.message for r in caplog.records if r.name == "TestLoggerLevel"]
    # DEBUG –∏ INFO ‚Äî –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–ª—è—Ç—å—Å—è
    assert "Debug hidden" not in messages
    assert "Info hidden" not in messages
    # WARNING –∏ ERROR ‚Äî –¥–æ–ª–∂–Ω—ã
    assert "Warning visible" in messages
    assert "Error visible" in messages


def test_log_execution_decorator_success(caplog):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @log_execution,
    —á—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """

    @log_execution(level="DEBUG", message="Test function")
    def sample_function(x, y):
        return x + y

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è caplog
    caplog.set_level("DEBUG", logger="FindDuplicatesLogger")

    result = sample_function(2, 3)
    assert result == 5

    messages = [r.message for r in caplog.records]
    assert any("üöÄ –ù–∞—á–∞–ª–æ: Test function" in msg for msg in messages)
    assert any("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: Test function" in msg for msg in messages)


def test_log_execution_decorator_exception(caplog):
    """
    –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ,
    –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É.
    """

    @log_execution(level="INFO", message="Func with error")
    def error_function():
        raise ValueError("Oops")

    caplog.set_level("INFO", logger="FindDuplicatesLogger")

    with pytest.raises(ValueError):
        error_function()

    messages = [r.message for r in caplog.records]
    assert any("üöÄ –ù–∞—á–∞–ª–æ: Func with error" in msg for msg in messages)
    # –û—à–∏–±–∫–∞: ‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ <–∏–º—è> ...
    assert any("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ error_function" in msg for msg in messages)
    # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Ç–µ–∫—Å—Ç "Oops" –∏–ª–∏ "ValueError"
    # –ù–æ –ª–æ–≥–≥–µ—Ä –ø–∏—à–µ—Ç –ª–∏—à—å "Oops" (—Ç–µ–∫—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è),
    # —Ç–∞–∫ —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:
    assert any("Oops" in msg for msg in messages)


def test_logger_wrapper_format(caplog):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç—Ä–æ–∫: YYYY-MM-DD HH:MM:SS [LEVEL] Message
    –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
    """
    caplog.set_level("INFO", logger="CheckFormat")

    logger_wrapper = LoggerWrapper(name="CheckFormat", log_level="INFO")
    logger_wrapper.info("Format test")

    # –°–º–æ—Ç—Ä–∏–º –∑–∞–ø–∏—Å–∏ –∏–º–µ–Ω–Ω–æ –æ—Ç "CheckFormat"
    records = [r for r in caplog.records if r.name == "CheckFormat"]
    assert len(records) >= 1
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ record.created –µ—Å—Ç—å timestamp (–≤ float),
    # –∞ record.levelname == 'INFO'
    # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ record.levelname == 'INFO'
    assert records[0].levelname == 'INFO'
    assert records[0].message == "Format test"


def test_logger_wrapper_file_not_writable(tmp_path, caplog):
    """
    –ï—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏,
    –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ file_handler,
    –ª–∏–±–æ –ø—Ä–æ–ø—É—Å–∫, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
    """
    locked_dir = tmp_path / "locked"
    locked_dir.mkdir()
    os.chmod(str(locked_dir), 0o400)  # —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
    log_file = locked_dir / "test.log"

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥–≥–µ—Ä
    try:
        # –ú–æ–∂–µ—Ç —Å—Ä–∞–∑—É —É–ø–∞—Å—Ç—å –≤ FileHandler,
        # –∏–ª–∏ –º–æ–∂–µ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –Ω–µ –ø–∏—Å–∞—Ç—å
        _ = LoggerWrapper(name="LockedLogger", log_level="INFO", log_file=str(log_file))
    except Exception as e:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—Å—è IOError/OSError ‚Äî —Ç–µ—Å—Ç –æ–∫
        pass
    finally:
        os.chmod(str(locked_dir), 0o700)

    # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–∞–ø–ª–æ–≥ –ø–æ–π–º–∞–ª warning/error ...
    # –ò–ª–∏ —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è
    assert not log_file.exists()


def test_logger_wrapper_sequence(caplog):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
    caplog.records —Ö—Ä–∞–Ω–∏—Ç –∏—Ö –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—è–≤–ª–µ–Ω–∏—è.
    """
    caplog.set_level("DEBUG", logger="SequenceLogger")

    logger_wrapper = LoggerWrapper(name="SequenceLogger", log_level="DEBUG")
    messages = ["First", "Second", "Third"]
    for msg in messages:
        logger_wrapper.info(msg)

    # –°–º–æ—Ç—Ä–∏–º –≤—Å–µ messages –æ—Ç 'SequenceLogger'
    records = [r.message for r in caplog.records if r.name == "SequenceLogger"]
    assert records == messages, f"–ü–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å: {messages}"
