# –§–∞–π–ª: tests/test_logger.py
import os
import unittest
import tempfile
import shutil
import re
from io import StringIO
from unittest.mock import patch
from find_duplicates.modules.logger import LoggerWrapper, log_execution, setup_logger


class TestLoggerWrapper(unittest.TestCase):
    def test_console_output(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ LoggerWrapper –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ–º assertLogs –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        logger_wrapper = LoggerWrapper(name="TestLogger", log_level="DEBUG")
        with self.assertLogs("TestLogger", level="DEBUG") as cm:
            logger_wrapper.debug("Debug message")
            logger_wrapper.info("Info message")
            logger_wrapper.warning("Warning message")
        # assertLogs —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞: "DEBUG:TestLogger:Debug message"
        output = "\n".join(cm.output)
        self.assertIn("DEBUG:TestLogger:Debug message", output)
        self.assertIn("INFO:TestLogger:Info message", output)
        self.assertIn("WARNING:TestLogger:Warning message", output)

    def test_file_output(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ log_file LoggerWrapper –ø–∏—à–µ—Ç –≤ —Ñ–∞–π–ª.
        """
        with tempfile.TemporaryDirectory() as tmp_dir:
            log_file = os.path.join(tmp_dir, "test.log")
            logger_wrapper = LoggerWrapper(name="TestLoggerFile", log_level="INFO", log_file=log_file)
            logger_wrapper.info("File log message")
            self.assertTrue(os.path.exists(log_file))
            with open(log_file, "r", encoding="utf-8") as f:
                content = f.read()
            self.assertIn("File log message", content)

    def test_logger_levels(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —É—Ä–æ–≤–Ω—é: –ø—Ä–∏ log_level="WARNING"
        —Å–æ–æ–±—â–µ–Ω–∏—è DEBUG –∏ INFO –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å.
        """
        logger_wrapper = LoggerWrapper(name="LevelsLogger", log_level="WARNING")
        with self.assertLogs("LevelsLogger", level="WARNING") as cm:
            logger_wrapper.debug("Debug hidden")
            logger_wrapper.info("Info hidden")
            logger_wrapper.warning("Warning visible")
            logger_wrapper.error("Error visible")
        messages = cm.output  # —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "WARNING:LevelsLogger:Warning visible"
        self.assertNotIn("DEBUG:LevelsLogger:Debug hidden", messages)
        self.assertNotIn("INFO:LevelsLogger:Info hidden", messages)
        self.assertIn("WARNING:LevelsLogger:Warning visible", messages)
        self.assertIn("ERROR:LevelsLogger:Error visible", messages)

    def test_logger_format(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–≤–æ–¥ –ª–æ–≥–≥–µ—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        –í assertLogs –≤—ã–≤–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "LEVEL:LoggerName:Message".
        """
        logger_wrapper = LoggerWrapper(name="FormatLogger", log_level="INFO")
        with self.assertLogs("FormatLogger", level="INFO") as cm:
            logger_wrapper.info("Format test message")
        output = cm.output[0]
        # –û–∂–∏–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "INFO:FormatLogger:Format test message"
        self.assertTrue(output.startswith("INFO:FormatLogger:"))
        self.assertIn("Format test message", output)

    def test_file_not_writable(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞.
        """
        with tempfile.TemporaryDirectory() as tmp_dir:
            locked_dir = os.path.join(tmp_dir, "locked")
            os.mkdir(locked_dir)
            os.chmod(locked_dir, 0o400)  # —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
            log_file = os.path.join(locked_dir, "test.log")
            with self.assertRaises(Exception):
                LoggerWrapper(name="LockedLogger", log_level="INFO", log_file=log_file)
            os.chmod(locked_dir, 0o700)

    def test_log_sequence(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –∏–¥—É—Ç –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–∞–∫–æ–º –æ–Ω–∏ –≤—ã–∑–≤–∞–Ω—ã.
        """
        logger_wrapper = LoggerWrapper(name="SequenceLogger", log_level="DEBUG")
        messages = ["First", "Second", "Third"]
        with self.assertLogs("SequenceLogger", level="DEBUG") as cm:
            for msg in messages:
                logger_wrapper.info(msg)
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é assertLogs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤–∏–¥–∞ "INFO:SequenceLogger:First", –∏ —Ç.–¥.
        expected = [f"INFO:SequenceLogger:{msg}" for msg in messages]
        self.assertEqual(cm.output, expected)


class TestLogExecutionDecorator(unittest.TestCase):
    def test_log_execution_success(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä log_execution –ª–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.
        """

        @log_execution(level="DEBUG", message="Test function")
        def sample_function(x, y):
            return x + y

        with self.assertLogs("FindDuplicatesLogger", level="DEBUG") as cm:
            result = sample_function(2, 3)
        self.assertEqual(result, 5)
        output = "\n".join(cm.output)
        self.assertIn("üöÄ –ù–∞—á–∞–ª–æ: Test function", output)
        self.assertIn("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: Test function", output)

    def test_log_execution_exception(self):
        """
        –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É.
        """

        @log_execution(level="INFO", message="Func with error")
        def error_function():
            raise ValueError("Oops")

        with self.assertLogs("FindDuplicatesLogger", level="INFO") as cm:
            with self.assertRaises(ValueError):
                error_function()
        output = "\n".join(cm.output)
        self.assertIn("üöÄ –ù–∞—á–∞–ª–æ: Func with error", output)
        self.assertIn("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ error_function", output)
        self.assertTrue("Oops" in output or "ValueError" in output)

if __name__ == "__main__":
    unittest.main()